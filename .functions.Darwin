# This is a temporary solution to seperate the OS specific stuff out
# TODO: Either make this solution robust or find something else

# Open a project in the TEXT_EDITOR
workon () {
	if [ $# -lt 1 ] ; then
		echo "Specify a project"
		return 1
	fi
	if [ ! -d "$PATH_TO_PROJECTS/$1" ] ; then
		echo "This project does not exist"
		return 1
	fi
	
	open -a "$TEXT_EDITOR" "$PATH_TO_PROJECTS/$1"
	#cd "$PATH_TO_PROJECTS/$1"
	echo "Working on $1"
}

# Open a project in the TEXT_EDITOR
playwith () {
	if [ $# -lt 1 ] ; then
		echo "Specify a playground"
		return 1
	fi
	if [ ! -d "$PATH_TO_PLAYGROUND/$1" ] ; then
		echo "This playground does not exist"
		return 1
	fi
	
	open -a "$TEXT_EDITOR" "$PATH_TO_PLAYGROUND/$1"
	echo "Playing with $1"
}

# OSX Specific Script to get battery details
battery () {
	# Grep options: -o output only matched part, -E use extended syntax
	# regex [^ ]+$ matches the last word (not a space followed by 1+ chars to end)
	# Battery remaining mAh is last word
	charge=$( system_profiler SPPowerDataType | grep 'Charge Remaining' | grep -oE '[^ ]+$' )

	# Full charge 
	full_charge=$( system_profiler SPPowerDataType | grep 'Full Charge Capacity' | grep -oE '[^ ]+$' )

	# Is charging?
	charging=$( system_profiler SPPowerDataType | grep 'Charging' | tail -n 1 | grep -oE '[^ ]+$' )

	# Percentage calculation
	#percent=$( echo "scale=4; $charge / $full_charge * 100" | bc )
	percent=$(( $charge * 100 / $full_charge ))

	echo "$charge $full_charge $percent $charging"
}

# OSX specific script (uses AppleScripts) to ask me to take a break every hour
# Run this function as a background process using &
# alert &
alert () {
        while true ; do
            sleep 300
            if [ "$?" -eq 0 ] ; then
                    osascript -e 'tell app "System Events" to display dialog "Take a break! You have been staring at the screen for far too long "' 1>&/dev/null
                    break
            fi
        done
        exit 0
}